{"name":"rnmdl","tagline":"Material Design components for React Native","body":"# [Material Design](http://www.google.com/design/spec/material-design/introduction.html) components for [React Native](https://facebook.github.io/react-native)\r\n\r\n[![npm](https://img.shields.io/npm/v/react-native-material-kit.svg)](https://www.npmjs.com/package/react-native-material-kit)\r\n[![react-native](https://img.shields.io/badge/react--native-v0.8.0-05A5D1.svg)](https://facebook.github.io/react-native \"tested react-native version\")\r\n[![DUB](https://img.shields.io/dub/l/vibe-d.svg)](https://raw.githubusercontent.com/xinthink/react-native-material-kit/master/LICENSE.md \"MIT\")\r\n\r\nThis is a port of [MaterialKit](https://github.com/nghialv/MaterialKit) (written in Swift) to Objective-C, so that it can be used in [React Native](https://facebook.github.io/react-native) projects, as a static library.\r\n\r\nThanks to the great work of [@nghialv](https://github.com/nghialv)! :thumbsup:\r\n\r\n\r\n## Getting Started\r\n\r\n`cd` to your React Native project,\r\n\r\n1. `npm i -S react-native-material-kit`\r\n2. Add `node_modules/react-native-material-kit/iOS/RCTMaterialKit.xcodeproj` to your xcode project, usually under the `Libraries` group\r\n3. Add `libRCTMaterialKit.a` (from `Products` under `RCTMaterialKit.xcodeproj`) to build target's `Linked Frameworks and Libraries` list\r\n4. `require('react-native-material-kit')` to start using the components, in js files\r\n5. Have fun!\r\n\r\n\r\n## Components\r\n\r\n### Buttons\r\n\r\n![buttons-mdl](https://cloud.githubusercontent.com/assets/390805/8888853/69f8d9f8-32f2-11e5-9823-c235ab8c0dd2.gif)\r\n\r\nApply [Material Design Buttons](http://www.getmdl.io/components/index.html#buttons-section) with minimum codes using pre-defined builders, which comply with the [Material Design Lite default theme](http://www.getmdl.io/customize/index.html).\r\n\r\n```jsx\r\n// colored button with default theme (configurable)\r\nvar ColoredRaisedButton = MKButton.coloredButton()\r\n  .withText('BUTTON')\r\n  .withOnPress(() => {\r\n    console.log(\"Hi, it's a colored button!\");\r\n  })\r\n  .build();\r\n\r\n...\r\n<ColoredRaisedButton/>\r\n```\r\n\r\nAnd you can definitely build customized buttons from scratch.\r\n\r\nwith builder:\r\n\r\n```jsx\r\nvar CustomButton = new MKButton.Builder()\r\n  .withBackgroundColor(MKColor.Teal)\r\n  .withShadowRadius(2)\r\n  .withShadowOffset({width:0, height:2})\r\n  .withShadowOpacity(.7)\r\n  .withShadowColor('black')\r\n  .withOnPress(() => {\r\n    console.log('hi, raised button!');\r\n  })\r\n  .withTextStyle({\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n  })\r\n  .withText('RAISED BUTTON')\r\n  .build();\r\n\r\n...\r\n<CustomButton/>\r\n```\r\n\r\nthe jsx equivalent:\r\n\r\n```jsx\r\n<MKButton\r\n  backgroundColor={MKColor.Teal}\r\n  shadowRadius={2}\r\n  shadowOffset={{width:0, height:2}}\r\n  shadowOpacity={.7}\r\n  shadowColor=\"black\"\r\n  onPress={() => {\r\n    console.log('hi, raised button!');\r\n  }}\r\n  >\r\n  <Text pointerEvents=\"none\"\r\n        style={{color: 'white', fontWeight: 'bold',}}>\r\n    RAISED BUTTON\r\n  </Text>\r\n</MKButton>\r\n```\r\n\r\n:point_right: [the complete example](https://github.com/xinthink/react-native-material-kit/blob/master/Example/App/buttons.js)\r\n\r\n> Why builders? See the '[Builder vs. configuration object](https://github.com/xinthink/react-native-material-kit/issues/3)' discussion\r\n\r\n\r\n### Text Fields\r\n\r\nBuilt-in textfields, which comply with [Material Design Lite](http://www.getmdl.io/components/#textfields-section).\r\n\r\n![textfields-mdl](https://cloud.githubusercontent.com/assets/390805/8794770/26b24724-2fb9-11e5-9af4-abead1cd456b.gif)\r\n\r\n\r\n```jsx\r\n// textfield with default theme (configurable)\r\nvar Textfield = MKTextField.textfield()\r\n  .withPlaceholder('Text...')\r\n  .withStyle(styles.textfield)\r\n  .build();\r\n\r\n...\r\n<Textfield/>\r\n```\r\n\r\nCustomizing textfields through builder:\r\n\r\n```jsx\r\nvar CustomTexfield = new MKTextField.Builder()\r\n  .withBackgroundColor('rgba(158,158,158,.2)')\r\n  .withTintColor(MKColor.Teal)\r\n  .withTextColor(MKColor.Orange)\r\n  .withPlaceholder('Hint')\r\n  .withRippleEnabled(true)\r\n  .withStyle(styles.textfield)\r\n  .build();\r\n\r\n...\r\n<CustomTexfield/>\r\n```\r\n\r\nthe jsx equivalent:\r\n\r\n```jsx\r\n<MKTextField\r\n  backgroundColor=\"rgba(158,158,158,.2)\"\r\n  tintColor={MKColor.Teal}\r\n  textColor={MKColor.Orange}\r\n  placeholder=\"Hint\"\r\n  rippleEnabled={true}\r\n  style={styles.textfield}/>\r\n```\r\n\r\n:point_right: [the complete example](https://github.com/xinthink/react-native-material-kit/blob/master/Example/App/textfields.js)\r\n\r\n\r\n### Toggles\r\n\r\n[Icon toggle](http://ww.getmdl.io/components/index.html#toggles-section/icon-toggle) & [Switch](http://ww.getmdl.io/components/index.html#toggles-section/switch)\r\n\r\n![toggles-mdl](https://cloud.githubusercontent.com/assets/390805/8903074/de0ed748-3487-11e5-9448-9ee304e0a6b6.gif)\r\n\r\n### Icon toggle\r\n\r\n```jsx\r\n<MKIconToggle\r\n  checked={true}\r\n  onCheckedChange={this._onIconChecked}\r\n  onPress={this._onIconClicked}\r\n  >\r\n  <Text pointerEvents=\"none\"\r\n        style={styles.toggleTextOff}>Off</Text>\r\n  <Text state_checked={true}\r\n        pointerEvents=\"none\"\r\n        style={[styles.toggleText, styles.toggleTextOn]}>On</Text>\r\n</MKIconToggle>\r\n```\r\n\r\nThe two `Text` tags here, similar to [State List](http://developer.android.com/guide/topics/resources/drawable-resource.html#StateList) in Android development, which can give you the flexibility to decide what content and how it is shown for each state of the toggle. For example, you can use [react-native-icons](https://github.com/corymsmith/react-native-icons) here, or any content with more sophisticated styles.\r\n\r\n### Switch\r\n\r\n```jsx\r\n// using Builder\r\nconst OrangeAppleSwitch = MKSwitch.mkSwitch()\r\n  .withStyle(styles.appleSwitch)\r\n  .withOnColor('rgba(255,152,0,.3)')\r\n  .withThumbOnColor(MKColor.Orange)\r\n  .withRippleLayerColor('rgba(255,152,0,.2)')\r\n  .withOnCheckedChange(() => console.log('orange switch clicked'))\r\n  .build();\r\n...\r\n<OrangeAppleSwitch/>\r\n\r\n// jsx only\r\n<MKSwitch\r\n  style={styles.appleSwitch}\r\n  onColor=\"rgba(255,152,0,.3)\"\r\n  thumbOnColor={MKColor.Orange}\r\n  rippleLayerColor=\"rgba(255,152,0,.2)\"\r\n  onCheckedChange={() => console.log('orange switch clicked')}\r\n/>\r\n```\r\n\r\n:point_right: [the complete example](https://github.com/xinthink/react-native-material-kit/blob/master/Example/App/toggles.js)\r\n\r\n\r\n---\r\nIt's the very begining of the project, lots of work to be done, contributions are welcome! :beers:\r\n","google":"UA-33049696-1","note":"Don't delete this file! It's used internally to help with page regeneration."}